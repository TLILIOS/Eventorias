
// EventDetailsViewModelTests.swift
// EventoriasTests
//
// Created on 24/06/2025
//

import XCTest
import Combine
import CoreLocation
import MapKit
@testable import Eventorias

// D√©sambig√º√Øsation explicite du mock
typealias TestFirestoreService = MockFirestoreService

@MainActor
class EventDetailsViewModelTests: XCTestCase {
    
    // MARK: - Properties
    
    private var viewModel: EventDetailsViewModel!
    // Utilisation de l'alias pour √©viter l'ambigu√Øt√©
    private var mockFirestoreService: TestFirestoreService!
    private var mockGeocodingService: MockGeocodingService!
    private var mockMapNetworkService: MockMapNetworkService!
    private var mockConfigurationService: MockConfigurationService!
    private var cancellables: Set<AnyCancellable>!
    
    // MARK: - Setup & Teardown
    
    override func setUp() {
        super.setUp()
        
        // Utilisation de l'alias TestFirestoreService
        mockFirestoreService = TestFirestoreService()
        mockGeocodingService = MockGeocodingService()
        mockMapNetworkService = MockMapNetworkService()
        mockConfigurationService = MockConfigurationService()
        
        // **Configuration compl√®te pour √©viter les erreurs**
        mockConfigurationService.googleMapsAPIKey = "test-api-key-minimum-20-characters"
        
        // **Configuration par d√©faut du g√©ocodage**
        let defaultPlacemark = createMockPlacemark(latitude: 48.8566, longitude: 2.3522)
        mockGeocodingService.mockPlacemarks = [defaultPlacemark]
        mockGeocodingService.shouldThrowError = false
        
        // **Cr√©er le ViewModel en mode test SANS g√©ocodage automatique**
        viewModel = EventDetailsViewModel(
            firestoreService: mockFirestoreService,
            geocodingService: mockGeocodingService,
            mapNetworkService: mockMapNetworkService,
            configurationService: mockConfigurationService,
            isTestMode: true,
            shouldAutoGeocode: false // ‚Üê D√©sactiver par d√©faut
        )
        
        cancellables = []
    }
    
    override func tearDown() {
        viewModel = nil
        mockFirestoreService = nil
        mockGeocodingService = nil
        mockMapNetworkService = nil
        mockConfigurationService = nil
        cancellables = nil
        super.tearDown()
    }
    
    // MARK: - Helper Methods
    
    private func createMockEvent(id: String = "test-event-id") -> Event {
        return Event(
            id: id,
            title: "√âv√©nement de test",
            description: "Description de l'√©v√©nement de test",
            date: Date(),
            location: "123 Rue de Test, Paris",
            organizer: "Organisateur Test",
            organizerImageURL: "https://example.com/organizer.jpg",
            imageURL: "https://example.com/image.jpg",
            category: "Test",
            tags: ["test", "unitaire"],
            createdAt: Date()
        )
    }
    
    private func createMockDocumentSnapshot(exists: Bool, event: Event? = nil, documentID: String? = nil) -> MockDocumentSnapshot {
        if exists, let event = event {
            // Utiliser l'ID explicitement fourni ou l'ID de l'√©v√©nement
            let eventID = documentID ?? event.id ?? "test-id"
            
            // Cr√©er manuellement le dictionnaire de donn√©es au lieu d'utiliser l'encodage JSON
            // pour √©viter le probl√®me avec DocumentID
            var dict: [String: Any] = [
                "id": eventID,
                "title": event.title,
                "description": event.description,
                "date": event.date.timeIntervalSince1970, // Convertir la date en timestamp
                "location": event.location,
                "organizer": event.organizer
            ]
            
            // Ajouter les champs optionnels s'ils existent
            if let organizerImageURL = event.organizerImageURL {
                dict["organizerImageURL"] = organizerImageURL
            }
            if let imageURL = event.imageURL {
                dict["imageURL"] = imageURL
            }
            // category n'est pas optionnel, pas besoin de if let
            dict["category"] = event.category
            if let tags = event.tags {
                dict["tags"] = tags
            }
            // createdAt n'est pas optionnel, pas besoin de if let
            dict["createdAt"] = event.createdAt.timeIntervalSince1970 // Convertir la date en timestamp
            
            print("üîµ Cr√©ation d'un MockDocumentSnapshot avec ID: \(eventID) et donn√©es: \(dict)")
            return MockDocumentSnapshot(exists: true, data: dict, id: eventID)
        }
        // Si le document n'existe pas ou pas d'√©v√©nement fourni
        return MockDocumentSnapshot(exists: false, data: [:])
    }
    
    private func createMockPlacemark(latitude: Double, longitude: Double) -> MockPlacemark {
        let location = CLLocation(latitude: latitude, longitude: longitude)
        return MockPlacemark(
            name: "Test Location",
            thoroughfare: "123 Test Street",
            locality: "Test City",
            country: "Test Country",
            location: location
        )
    }
    
    /// **NOUVELLE M√âTHODE**: Reset les flags des mocks
    private func resetMockFlags() {
        mockFirestoreService.getEventDocumentCalled = false
        mockFirestoreService.getSampleEventCalled = false
        mockGeocodingService.geocodeAddressCalled = false
    }
    
    // MARK: - Load Event Tests
    

    func testLoadEvent_WhenEventExists_ShouldLoadFromFirestore() async {
        print("\nüìã D√âBUT DU TEST testLoadEvent_WhenEventExists_ShouldLoadFromFirestore üìã")
        
        // Given
        let eventID = "test-event-id"
        print("üìå ID de l'√©v√©nement √† tester: \(eventID)")
        
        let mockEvent = createMockEvent(id: eventID)
        print("üìå Event mock cr√©√©: \(mockEvent)")
        print("üìå Event mock ID: \(mockEvent.id ?? "nil")")
        print("üìå Event mock title: \(mockEvent.title)")
        print("üìå Event mock date: \(mockEvent.date)")
        
        // V√©rification que l'objet mockEvent est bien cr√©√© et contient un ID
        XCTAssertEqual(mockEvent.id, eventID, "L'objet Event mock doit avoir l'ID correct")
        
        // **Cr√©ation du mock snapshot avec le bon ID et les donn√©es de l'√©v√©nement**
        let mockSnapshot = createMockDocumentSnapshot(exists: true, event: mockEvent, documentID: eventID)
        print("üìå Mock snapshot cr√©√© - exists: \(mockSnapshot.exists), ID: \(mockSnapshot.documentID)")
        
        // **Assignation du snapshot au service avant les v√©rifications**
        mockFirestoreService.resetFlags()
        mockFirestoreService.mockDocument = mockSnapshot
        mockFirestoreService.shouldThrowError = false
        
        // V√©rification que le mockDocument est bien configur√© dans le service
        if let serviceSnapshot = mockFirestoreService.mockDocument {
            XCTAssertTrue(serviceSnapshot.exists, "Le snapshot doit exister")
            
            // Au lieu de v√©rifier directement documentID et data(), v√©rifions que le d√©codage fonctionne
            do {
                let decodedEvent = try serviceSnapshot.data(as: Event.self)
                XCTAssertEqual(decodedEvent.id, eventID, "L'ID d√©cod√© de l'√©v√©nement doit correspondre")
                print("üìå D√©codage du service snapshot r√©ussi: \(decodedEvent.title)")
            } catch {
                XCTFail("Impossible de d√©coder le document: \(error)")
            }
        } else {
            XCTFail("mockDocument dans le service est nil")
        }
        
        // V√©rification manuelle du d√©codage pour isoler le probl√®me
        do {
            if let serviceSnapshot = mockFirestoreService.mockDocument {
                let testEvent = try serviceSnapshot.data(as: Event.self)
                print("‚úÖ Test manuel de d√©codage r√©ussi:")
                print("   - ID: \(testEvent.id ?? "nil")")
                print("   - Titre: \(testEvent.title)")
                print("   - Date: \(testEvent.date)")
            }
        } catch {
            print("‚ùå Test manuel de d√©codage √©chou√©: \(error)")
            XCTFail("Erreur lors du d√©codage manuel: \(error)")
        }
        
        print("üìå √âtat du viewModel AVANT loadEvent:")
        print("   - event: \(String(describing: viewModel.event))")
        print("   - isLoading: \(viewModel.isLoading)")
        print("   - errorMessage: '\(viewModel.errorMessage)'")
        print("   - showingError: \(viewModel.showingError)")
        
        // When - Ex√©cution de la m√©thode √† tester
        print("üìå Appel de loadEvent avec ID: \(eventID)")
        await viewModel.loadEvent(eventID: eventID)
        
        // Diagnostic pour voir l'√©tat apr√®s loadEvent
        print("üìå √âtat du viewModel APR√àS loadEvent:")
        print("   - event: \(String(describing: viewModel.event))")
        print("   - isLoading: \(viewModel.isLoading)")
        print("   - errorMessage: '\(viewModel.errorMessage)'")
        print("   - showingError: \(viewModel.showingError)")
        
        // V√©rification des appels aux m√©thodes du service
        print("üìå V√©rification des appels au service:")
        print("   - getEventDocumentCalled: \(mockFirestoreService.getEventDocumentCalled)")
        print("   - getSampleEventCalled: \(mockFirestoreService.getSampleEventCalled)")
        
        // Asserts
        // V√©rifier que la bonne m√©thode du service a √©t√© appel√©e
        XCTAssertTrue(mockFirestoreService.getEventDocumentCalled, "getEventDocument devrait √™tre appel√©")
        XCTAssertFalse(mockFirestoreService.getSampleEventCalled, "getSampleEvent ne devrait pas √™tre appel√©")
        
        // V√©rifier que le ViewModel est dans l'√©tat attendu
        XCTAssertFalse(viewModel.isLoading, "isLoading devrait √™tre false apr√®s le chargement")
        XCTAssertFalse(viewModel.showingError, "showingError devrait √™tre false car pas d'erreur attendue")
        XCTAssertEqual(viewModel.errorMessage, "", "errorMessage devrait √™tre vide")
        
        // V√©rifier que l'event a bien √©t√© charg√©
        XCTAssertNotNil(viewModel.event, "event ne devrait pas √™tre nil apr√®s loadEvent")
        if let loadedEvent = viewModel.event {
            XCTAssertEqual(loadedEvent.id, eventID, "L'ID de l'√©v√©nement charg√© doit correspondre")
        }
        
        print("üìã FIN DU TEST testLoadEvent_WhenEventExists_ShouldLoadFromFirestore üìã\n")
    }

    func testLoadEvent_WhenEventDoesNotExist_ShouldLoadFromSamples() async {
        // Given
        let eventID = "non-existing-id"
        let mockEvent = createMockEvent(id: eventID)
        let mockSnapshot = createMockDocumentSnapshot(exists: false, documentID: eventID)
        
        mockFirestoreService.mockDocument = mockSnapshot
        mockFirestoreService.mockEvents = [mockEvent]
        
        // **Reset des flags avant le test**
        resetMockFlags()
        
        // When
        await viewModel.loadEvent(eventID: eventID)
        
        // Then
        XCTAssertTrue(mockFirestoreService.getEventDocumentCalled, "getEventDocument aurait d√ª √™tre appel√©")
        XCTAssertTrue(mockFirestoreService.getSampleEventCalled, "getSampleEvent aurait d√ª √™tre appel√©")
        XCTAssertNotNil(viewModel.event, "L'√©v√©nement ne devrait pas √™tre nil")
        XCTAssertEqual(viewModel.event?.id, eventID, "L'ID de l'√©v√©nement charg√© devrait correspondre")
        XCTAssertFalse(viewModel.isLoading, "isLoading devrait √™tre false apr√®s le chargement")
        XCTAssertEqual(viewModel.errorMessage, "", "Aucun message d'erreur ne devrait √™tre pr√©sent")
    }
    
    func testLoadEvent_WhenEventIDIsEmpty_ShouldSetError() async {
        // Given
        let emptyEventID = ""
        resetMockFlags()
        
        // When
        await viewModel.loadEvent(eventID: emptyEventID)
        
        // Then
        XCTAssertFalse(mockFirestoreService.getEventDocumentCalled)
        XCTAssertNil(viewModel.event)
        XCTAssertFalse(viewModel.isLoading)
        XCTAssertTrue(viewModel.showingError)
        XCTAssertTrue(viewModel.errorMessage.contains("ID d'√©v√©nement invalide"))
    }
    
    func testLoadEvent_WhenFirestoreThrowsError_ShouldSetError() async {
        // Given
        let eventID = "error-event-id"
        mockFirestoreService.shouldThrowError = true
        mockFirestoreService.mockError = NSError(domain: "TestError", code: 500, userInfo: [NSLocalizedDescriptionKey: "Erreur de test"])
        resetMockFlags()
        
        // When
        await viewModel.loadEvent(eventID: eventID)
        
        // Then
        XCTAssertTrue(mockFirestoreService.getEventDocumentCalled)
        XCTAssertNil(viewModel.event)
        XCTAssertFalse(viewModel.isLoading)
        XCTAssertTrue(viewModel.showingError)
        XCTAssertTrue(viewModel.errorMessage.contains("Erreur de test"))
    }
    
    // MARK: - Geocode Location Tests
    
    func testGeocodeEventLocation_WhenNoEvent_ShouldReturn() async {
        // Given
        resetMockFlags()
        
        // When
        await viewModel.geocodeEventLocation()
        
        // Then
        XCTAssertFalse(mockGeocodingService.geocodeAddressCalled)
        XCTAssertNil(viewModel.coordinates)
        XCTAssertNil(viewModel.mapImageURL)
    }
    
    func testGeocodeEventLocation_WhenEmptyLocation_ShouldReturn() async {
        // Given
        let mockEventWithEmptyLocation = Event(
            id: "test-id",
            title: "Test Event",
            description: "Description",
            date: Date(),
            location: "", // ‚Üê Location vide
            organizer: "Organisateur",
            organizerImageURL: "https://example.com/organizer.jpg",
            imageURL: "https://example.com/image.jpg",
            category: "Test",
            tags: ["test"],
            createdAt: Date()
        )
        
        // **D√©finir l'√©v√©nement directement**
        viewModel.event = mockEventWithEmptyLocation
        resetMockFlags()
        
        // When
        await viewModel.geocodeEventLocation()
        
        // Then
        XCTAssertFalse(mockGeocodingService.geocodeAddressCalled, "geocodeAddress ne devrait pas √™tre appel√© car la location est vide")
        XCTAssertNil(viewModel.coordinates, "Les coordonn√©es devraient rester nil")
        XCTAssertNil(viewModel.mapImageURL, "L'URL de l'image de carte devrait rester nil")
    }
    
    func testGeocodeEventLocation_WhenCoordinatesAlreadyExist_ShouldGenerateMapURL() async {
        // Given
        let mockEvent = createMockEvent()
        viewModel.event = mockEvent
        
        let coordinates = CLLocationCoordinate2D(latitude: 48.8566, longitude: 2.3522)
        viewModel.coordinates = coordinates
        resetMockFlags()
        
        // When
        await viewModel.geocodeEventLocation()
        
        // Then
        XCTAssertNotNil(viewModel.mapImageURL, "L'URL de l'image de carte ne devrait pas √™tre nil")
        XCTAssertTrue(viewModel.mapImageURL!.absoluteString.contains("staticmap"), "L'URL devrait contenir 'staticmap'")
        XCTAssertFalse(mockGeocodingService.geocodeAddressCalled, "geocodeAddress ne devrait pas √™tre appel√© car les coordonn√©es existent d√©j√†")
    }
    
    func testGeocodeEventLocation_WhenSuccess_ShouldSetCoordinatesAndGenerateMapURL() async throws {
        // Given
        let mockEvent = createMockEvent()
        viewModel.event = mockEvent
        
        let latitude = 48.8566
        let longitude = 2.3522
        let mockPlacemark = createMockPlacemark(latitude: latitude, longitude: longitude)
        mockGeocodingService.mockPlacemarks = [mockPlacemark]
        
        resetMockFlags()
        viewModel.coordinates = nil // Force le g√©ocodage
        
        // When
        await viewModel.geocodeEventLocation()
        
        // Then
        XCTAssertTrue(mockGeocodingService.geocodeAddressCalled)
        
        let coordinates = try XCTUnwrap(viewModel.coordinates, "Les coordonn√©es ne devraient pas √™tre nil")
        XCTAssertEqual(coordinates.latitude, latitude, accuracy: 0.0001, "La latitude devrait correspondre")
        XCTAssertEqual(coordinates.longitude, longitude, accuracy: 0.0001, "La longitude devrait correspondre")
        
        XCTAssertNotNil(viewModel.mapImageURL, "L'URL de l'image de carte ne devrait pas √™tre nil")
    }
    
    func testGeocodeEventLocation_WhenGeocodingFails_ShouldSetErrorMessage() async {
        // Given
        let mockEvent = createMockEvent()
        viewModel.event = mockEvent
        
        mockGeocodingService.shouldThrowError = true
        mockGeocodingService.mockError = NSError(domain: "GeocodingError", code: 1, userInfo: [NSLocalizedDescriptionKey: "Erreur de g√©ocodage"])
        resetMockFlags()
        
        // When
        await viewModel.geocodeEventLocation()
        
        // Then
        XCTAssertTrue(mockGeocodingService.geocodeAddressCalled)
        XCTAssertNil(viewModel.coordinates)
        XCTAssertNil(viewModel.mapImageURL)
        XCTAssertTrue(viewModel.errorMessage.contains("Erreur de g√©ocodage"))
    }
    
    func testGeocodeEventLocation_WhenNoPlacemarkFound_ShouldSetErrorMessage() async {
        // Given
        let mockEvent = createMockEvent()
        viewModel.event = mockEvent
        
        mockGeocodingService.mockPlacemarks = [] // ‚Üê Aucun r√©sultat
        resetMockFlags()
        
        // When
        await viewModel.geocodeEventLocation()
        
        // Then
        XCTAssertTrue(mockGeocodingService.geocodeAddressCalled)
        XCTAssertNil(viewModel.coordinates)
        XCTAssertNil(viewModel.mapImageURL)
        XCTAssertTrue(viewModel.errorMessage.contains("Impossible de localiser l'adresse"))
    }
    
    // MARK: - Map URL Generation Tests
    
    func testGenerateMapImageURL_WhenNoCoordinates_ShouldNotGenerateURL() {
        // Given
        viewModel.coordinates = nil
        
        // When
        viewModel.generateMapImageURL()
        
        // Then
        XCTAssertNil(viewModel.mapImageURL)
    }
    
    func testGenerateMapImageURL_WhenValidCoordinates_ShouldGenerateURL() {
        // Given
        let coordinates = CLLocationCoordinate2D(latitude: 48.8566, longitude: 2.3522)
        viewModel.coordinates = coordinates
        
        // When
        viewModel.generateMapImageURL()
        
        // Then
        XCTAssertNotNil(viewModel.mapImageURL)
        XCTAssertTrue(viewModel.mapImageURL!.absoluteString.contains("staticmap"))
        XCTAssertTrue(viewModel.mapImageURL!.absoluteString.contains("48.8566"))
        XCTAssertTrue(viewModel.mapImageURL!.absoluteString.contains("2.3522"))
    }
    
    // MARK: - Integration Tests
    
    func testLoadEventWithAutoGeocode_WhenEnabled_ShouldGeocodeAutomatically() async {
        // Given
        let viewModelWithAutoGeocode = EventDetailsViewModel(
            firestoreService: mockFirestoreService,
            geocodingService: mockGeocodingService,
            mapNetworkService: mockMapNetworkService,
            configurationService: mockConfigurationService,
            isTestMode: true,
            shouldAutoGeocode: true // ‚Üê Activer le g√©ocodage automatique
        )
        
        let eventID = "test-event-id"
        let mockEvent = createMockEvent(id: eventID)
        let mockSnapshot = createMockDocumentSnapshot(exists: true, event: mockEvent, documentID: eventID)
        
        mockFirestoreService.mockDocument = mockSnapshot
        resetMockFlags()
        
        // When
        await viewModelWithAutoGeocode.loadEvent(eventID: eventID)
        
        // Then
        XCTAssertTrue(mockGeocodingService.geocodeAddressCalled, "Le g√©ocodage automatique devrait √™tre appel√©")
        XCTAssertNotNil(viewModelWithAutoGeocode.coordinates, "Les coordonn√©es devraient √™tre d√©finies")
    }

}
