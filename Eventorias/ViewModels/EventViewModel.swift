//
//  EventViewModel.swift
//  Eventorias
//
//  Created by TLiLi Hamdi on 02/06/2025.
//

import Foundation
import SwiftUI
import Combine
import UIKit
import PhotosUI

@MainActor
final class EventViewModel: ObservableObject {
    // MARK: - Published Properties
    
    /// Liste des √©v√©nements
    @Published var events: [Event] = []
    
    /// √âtat de chargement
    @Published var isLoading = false
    
    /// Texte de recherche
    @Published var searchText = ""
    
    /// Message d'erreur
    @Published var errorMessage = ""
    
    /// Contr√¥le l'affichage de l'erreur
    @Published var showingError = false
    
    /// Option de tri s√©lectionn√©e
    @Published var sortOption: SortOption = .dateAscending
    
    // MARK: - Event Creation Properties
    
    /// Titre de l'√©v√©nement
    @Published var eventTitle = ""
    
    /// Description de l'√©v√©nement
    @Published var eventDescription = ""
    
    /// Date de l'√©v√©nement
    @Published var eventDate = Date()
    
    /// Adresse de l'√©v√©nement
    @Published var eventAddress = ""
    
    /// Image s√©lectionn√©e pour l'√©v√©nement
    @Published var eventImage: UIImage? = nil
    
    /// Indique si la cr√©ation de l'√©v√©nement a r√©ussi
    @Published var eventCreationSuccess = false
    
    /// √âtat de l'upload d'image
    @Published var imageUploadState: ImageUploadState = .ready
    
    // MARK: - Enums
    
    enum SortOption: String, CaseIterable, Identifiable {
        case dateAscending = "Date (croissant)"
        case dateDescending = "Date (d√©croissant)"
        
        var id: String { self.rawValue }
    }
    
    enum ImageUploadState: Equatable {
        case ready
        case uploading(progress: Double)
        case success(url: String)
        case failure(error: String)
        
        var isUploading: Bool {
            switch self {
            case .uploading: return true
            default: return false
            }
        }
        
        var progressValue: Double {
            switch self {
            case .uploading(let progress): return progress
            case .success: return 1.0
            default: return 0.0
            }
        }
    }
    
    // MARK: - Private Properties
    
    /// Service des √©v√©nements
    private let eventService: EventService
    
    /// Cancellables pour la gestion des abonnements
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Computed Properties
    
    /// √âv√©nements filtr√©s selon le texte de recherche
    var filteredEvents: [Event] {
        if searchText.isEmpty {
            return events
        } else {
            let query = searchText.lowercased()
            return events.filter { event in
                let titleMatch = event.title.lowercased().contains(query)
                let descMatch = event.description.lowercased().contains(query)
                let locMatch = event.location.lowercased().contains(query)
                return titleMatch || descMatch || locMatch
            }
        }
    }
    
    // MARK: - Initialization
    
    init(eventService: EventService = EventService()) {
        self.eventService = eventService
        setupSearchSubscription()
        setupSortSubscription()
    }
    
    // MARK: - Private Methods
    
    /// Configure l'abonnement pour la recherche - utilise uniquement le filtrage local
    private func setupSearchSubscription() {
        // D√©sactivation des appels r√©seau pour la recherche
        // Nous utilisons uniquement la propri√©t√© filteredEvents pour le filtrage local
        $searchText
            .removeDuplicates()
            .sink { [weak self] query in
                print("üì± EventViewModel: Recherche locale pour: \(query)")
                // On d√©clenche une notification de changement de la liste filtr√©e
                self?.objectWillChange.send()
            }
            .store(in: &cancellables)
    }
    
    /// Configure l'abonnement pour le tri
    private func setupSortSubscription() {
        $sortOption
            .dropFirst() // Ignorer la valeur initiale
            .sink { [weak self] _ in
                Task {
                    await self?.sortEvents()
                }
            }
            .store(in: &cancellables)
    }
    
    /// G√®re les erreurs
    private func handleError(_ error: Error) {
        errorMessage = error.localizedDescription
        showingError = true
    }
    
    /// Ex√©cute une action avec gestion du loading
    private func performAction(_ action: () async throws -> Void) async {
        defer { isLoading = false }
        
        isLoading = true
        
        do {
            try await action()
        } catch {
            handleError(error)
        }
    }
    
    // MARK: - Public Methods
    
    /// R√©cup√®re tous les √©v√©nements
    func fetchEvents() async {
        await performAction {
            print("üì± EventViewModel: D√©but du chargement des √©v√©nements...")
            
            // V√©rifier si la collection d'√©v√©nements est vide
            print("üì± EventViewModel: V√©rification si la collection est vide...")
            let isEmpty = try await eventService.isEventsCollectionEmpty()
            print("üì± EventViewModel: Collection vide? \(isEmpty)")
            
            // Si vide, ajouter des exemples d'√©v√©nements
            if isEmpty {
                print("üì± EventViewModel: Ajout d'√©v√©nements d'exemple...")
                try await eventService.addSampleEvents()
                print("üì± EventViewModel: √âv√©nements d'exemple ajout√©s avec succ√®s")
            }
            
            // R√©cup√©rer les √©v√©nements tri√©s selon l'option actuelle
            print("üì± EventViewModel: R√©cup√©ration des √©v√©nements tri√©s...")
            let sortedEvents = try await getSortedEvents()
            print("üì± EventViewModel: \(sortedEvents.count) √©v√©nements r√©cup√©r√©s")
            
            events = sortedEvents
            print("üì± EventViewModel: \(events.count) √©v√©nements assign√©s au mod√®le")
        }
    }
    
    /// Recherche des √©v√©nements bas√©s sur une requ√™te - seulement pour r√©f√©rence
    /// Cette m√©thode n'est plus utilis√©e car nous utilisons le filtrage local via filteredEvents
    func searchEvents(query: String) async {
        print("‚ö†Ô∏è searchEvents() appel√©e, mais cette m√©thode est d√©sactiv√©e en faveur du filtrage local")
        // Pas d'appel r√©seau, nous utilisons le filtrage local uniquement
    }
    
    /// Trie les √©v√©nements selon l'option s√©lectionn√©e
    @discardableResult
    func sortEvents() async -> [Event] {
        defer { isLoading = false }
        
        isLoading = true
        
        do {
            events = try await getSortedEvents()
            return events
        } catch {
            handleError(error)
            return events
        }
    }
    
    /// R√©cup√®re les √©v√©nements tri√©s
    private func getSortedEvents() async throws -> [Event] {
        let ascending = sortOption == .dateAscending
        return try await eventService.getEventsSortedByDate(ascending: ascending)
    }
    
    /// Rafra√Æchit les √©v√©nements
    func refreshEvents() async {
        await fetchEvents()
    }
    
    /// Ferme l'alerte d'erreur
    func dismissError() {
        showingError = false
        errorMessage = ""
    }
    
    /// Nettoie les ressources
    deinit {
        cancellables.removeAll()
    }
    
    // MARK: - Event Creation Methods
    
    /// Cr√©e un nouvel √©v√©nement avec les donn√©es actuelles
    func createEvent() async {
        await performAction {
            print("üì± EventViewModel: D√©but de la cr√©ation d'√©v√©nement")
            guard !eventTitle.isEmpty else { 
                print("üì± EventViewModel: Erreur - titre vide")
                throw NSError(domain: "EventViewModel", code: 400, userInfo: [NSLocalizedDescriptionKey: "Le titre ne peut pas √™tre vide"]) 
            }
            guard !eventAddress.isEmpty else { 
                print("üì± EventViewModel: Erreur - adresse vide")
                throw NSError(domain: "EventViewModel", code: 400, userInfo: [NSLocalizedDescriptionKey: "L'adresse ne peut pas √™tre vide"]) 
            }
            
            var imageURL: String? = nil
            
            // Si une image est fournie, l'uploader sur Firebase Storage
            if let image = eventImage, let imageData = image.jpegData(compressionQuality: 0.9) {
                print("üì± EventViewModel: D√©but de l'upload d'image (\(imageData.count) octets)")
                self.imageUploadState = .uploading(progress: 0.2)
                
                do {
                    // Simuler une progression r√©aliste pour l'interface utilisateur
                    self.imageUploadState = .uploading(progress: 0.5)
                    
                    print("üì± EventViewModel: Tentative d'upload d'image vers Firebase Storage...")
                    imageURL = try await eventService.uploadImage(imageData: imageData)
                    print("üì± EventViewModel: Image upload√©e avec succ√®s: \(imageURL ?? "URL vide")")
                    self.imageUploadState = .success(url: imageURL ?? "")
                } catch {
                    print("üì± EventViewModel: √âchec de l'upload d'image: \(error.localizedDescription)")
                    self.imageUploadState = .failure(error: error.localizedDescription)
                    throw error
                }
            } else {
                print("üì± EventViewModel: Pas d'image √† uploader")
            }
            
            // Cr√©er l'√©v√©nement avec ou sans URL d'image
            print("üì± EventViewModel: Cr√©ation de l'√©v√©nement dans Firestore...")
            let eventId = try await eventService.createEvent(
                title: eventTitle,
                description: eventDescription.isEmpty ? "Pas de description" : eventDescription,
                date: eventDate,
                location: eventAddress,
                image: eventImage
            )
            print("üì± EventViewModel: √âv√©nement cr√©√© avec succ√®s, ID: \(eventId)")
            
            // R√©initialiser les champs apr√®s la cr√©ation r√©ussie
            resetEventFormFields()
            
            // Marquer la cr√©ation comme r√©ussie pour afficher un message de confirmation
            eventCreationSuccess = true
            
            // Rafra√Æchir la liste des √©v√©nements
            print("üì± EventViewModel: Actualisation de la liste des √©v√©nements...")
            await fetchEvents()
        }
    }
    
    /// R√©initialise les champs du formulaire de cr√©ation d'√©v√©nement
    func resetEventFormFields() {
        eventTitle = ""
        eventDescription = ""
        eventDate = Date()
        eventAddress = ""
        eventImage = nil
        imageUploadState = .ready
    }
}
